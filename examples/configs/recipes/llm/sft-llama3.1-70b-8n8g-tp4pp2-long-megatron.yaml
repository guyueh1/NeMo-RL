sft:
  max_num_epochs: 1
  max_num_steps: 1000000
  val_period: 500
  val_batches: 4
  val_global_batch_size: 128
  val_micro_batch_size: 1
  val_at_start: false
  seed: 42
checkpointing:
  enabled: true
  checkpoint_dir: results/sft-llama3.1-70b-8n8g-tp4pp2-long-megatron
  metric_name: val_loss
  higher_is_better: false
  keep_top_k: 3
  save_period: 100
  checkpoint_must_save_by: null
policy:
  model_name: "meta-llama/Llama-3.1-70B"
  tokenizer:
    name: meta-llama/Llama-3.1-8B-Instruct ## specify if you'd like to use a tokenizer different from the model's default
  train_global_batch_size: 512
  train_micro_batch_size: 1
  max_total_sequence_length: 4096
  precision: "bfloat16"
  dtensor_cfg:
    enabled: false
  megatron_cfg:
    enabled: true
    empty_unused_memory_level: 1
    activation_checkpointing: false
    tensor_model_parallel_size: 4
    expert_tensor_parallel_size: 1
    expert_model_parallel_size: 1
    pipeline_model_parallel_size: 2
    num_layers_in_first_pipeline_stage: null
    num_layers_in_last_pipeline_stage: null
    context_parallel_size: 1
    pipeline_dtype: ${policy.precision}
    sequence_parallel: false
    freeze_moe_router: true
    moe_router_dtype: "fp64"
    moe_router_load_balancing_type: "none" # "seq_aux_loss" causes logprob error divergence for grpo
    moe_router_bias_update_rate: 0.0 # by default, disable bias updates for grpo
    moe_permute_fusion: false
    #gives ~20% training perf speedup with sequence packing 
    apply_rope_fusion: True
    
    optimizer:
      optimizer: "adam"
      lr: 2e-5
      min_lr: 2e-5
      weight_decay: 0.01
      bf16: true
      fp16: false
      params_dtype: "float32"

      #adam
      adam_beta1: 0.9
      adam_beta2: 0.999
      adam_eps: 1e-8

      #sgd
      sgd_momentum: 0.9

      #distributed optimizer
      use_distributed_optimizer: true
      use_precision_aware_optimizer: true

      clip_grad: 0.0

    scheduler:
      start_weight_decay: ${policy.megatron_cfg.optimizer.weight_decay}
      end_weight_decay: ${policy.megatron_cfg.optimizer.weight_decay}
      weight_decay_incr_style: "constant"
      lr_decay_style: "constant"
      lr_decay_iters: 1000
      lr_warmup_iters: 1
      lr_warmup_init: 2e-5

    distributed_data_parallel_config:
      grad_reduce_in_fp32: false
      overlap_grad_reduce: true
      overlap_param_gather: true
      average_in_collective: true
      use_custom_fsdp: false
      data_parallel_sharding_strategy: "optim_grads_params"
  dynamic_batching:
    enabled: false
  sequence_packing:
    enabled: false
  # makes the training sequence length divisible by the tensor parallel size
  # this is useful for sequence parallel training
  make_sequence_length_divisible_by: ${policy.megatron_cfg.tensor_model_parallel_size}
  max_grad_norm: null
  optimizer:
    name: "torch.optim.AdamW"
    kwargs:
      lr: 2e-5
      weight_decay: 0.01
      betas: [0.9, 0.98]
      eps: 1e-8
      # when using Dtensor, we need to set foreach
      # and fused to False
      foreach: False
      fused: False
data:
  max_input_seq_length: ${policy.max_total_sequence_length}
  dataset_name: "openmathinstruct2"
  prompt_file: examples/prompts/math.txt
  split: "train_1M"
  add_bos: true
  add_eos: true
  add_generation_prompt: true
  output_key: 'generated_solution'
  shuffle: true
  seed: 42
logger:
  log_dir: "logs"  # Base directory for all logs
  wandb_enabled: true # Make sure you do a ``wandb login [Your API key]'' before running
  tensorboard_enabled: true
  mlflow_enabled: False
  monitor_gpus: false  # If true, will monitor GPU usage and log to wandb and/or tensorboard
  wandb:
    project: "sft-dev"
    name: "openmathinstruct-nemorl-1M_train"
  tensorboard:
    log_dir: "tb_logs-openmathinstruct-nemorl-1M_train"
  gpu_monitoring:
    collection_interval: 10  # How often to collect GPU usage metrics (in seconds)
    flush_interval: 10  # How often to flush GPU usage metrics to the loggers (in seconds)
cluster:
  gpus_per_node: 8
  num_nodes: 8
