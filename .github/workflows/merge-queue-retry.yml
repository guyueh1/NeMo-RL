# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Merge Queue Auto-Retry"

on:
  pull_request:
    types:
      - dequeued

jobs:
  requeue-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.BOT_ID }}
          private-key: ${{ secrets.BOT_KEY }}

      - name: Check dequeue reason and retry count
        id: check_retry
        if: github.event.reason == 'CI_TIMEOUT'
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}

          # Debug: Show all comments first
          echo "=== All PR Comments ==="
          gh api "repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            --jq '.[] | {id: .id, created_at: .created_at, body: .body[:100]}'

          echo "=== Filtering for retry comments ==="

          # Get the current number of retry attempts from PR comments
          RETRY_COUNT=$(gh api "repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            --jq '[.[] | select(.body | contains("Auto-retry attempt")) | .body] | length')

          echo "Current retry count: $RETRY_COUNT"

          MAX_RETRIES=3

          if [ "$RETRY_COUNT" -lt "$MAX_RETRIES" ]; then
            echo "should_retry=true" >> $GITHUB_OUTPUT
            echo "retry_count=$((RETRY_COUNT + 1))" >> $GITHUB_OUTPUT
            echo "‚úÖ Will retry (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
          else
            echo "should_retry=false" >> $GITHUB_OUTPUT
            echo "‚ùå Max retries ($MAX_RETRIES) reached for PR #${PR_NUMBER}"
          fi

      - name: Add retry comment
        if: steps.check_retry.outputs.should_retry == 'true'
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          RETRY_COUNT=${{ steps.check_retry.outputs.retry_count }}

          gh api "repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            -f body="üîÑ Auto-retry attempt ${RETRY_COUNT}: PR was removed from merge queue, automatically requeuing..."

      - name: Requeue Pull Request
        if: steps.check_retry.outputs.should_retry == 'true'
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_NODE_ID="${{ github.event.pull_request.node_id }}"

          echo "Requeuing PR #${PR_NUMBER}..."

          # First, try using GraphQL API to enqueue the PR directly
          GRAPHQL_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"mutation { enqueuePullRequest(input: {pullRequestId: \\\"${PR_NODE_ID}\\\"}) { clientMutationId } }\"}" \
            https://api.github.com/graphql)

          if echo "$GRAPHQL_RESPONSE" | jq -e '.data.enqueuePullRequest' > /dev/null; then
            echo "PR #${PR_NUMBER} has been successfully requeued"
          else
            echo "‚ùå Failed to enqueue PR #${PR_NUMBER}. GraphQL response for debugging:"
            echo "$GRAPHQL_RESPONSE"
            exit 1
          fi

      - name: Max retries reached comment
        if: steps.check_retry.outputs.should_retry == 'false'
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}

          gh api "repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            -f body="‚ö†Ô∏è Maximum auto-retry attempts reached. PR was removed from merge queue multiple times. Please investigate the issue and manually requeue if needed."

      - name: Notify on failure
        if: failure()
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}

          gh api "repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            -f body="‚ùå Auto-retry failed due to an error in the workflow. Please manually requeue the PR."
